13:15 25/01/2023

--seleccionar el numero de empleados que trabaja en cada pais 
--que trabaja en cada pais no este en la region de Asia


select country_name, count(employee_id)
from employees join departments using (department_id)
join locations using (location_id)
join countries using (country_id)
join regions using (region_id)
where region_name != 'Asia'
group by country_name;

--seleccionar el numero de empleados que trabaja en cada pais 
--que trabaja en cada pais no este en la region de Asia
--siendo el num de empleados mayor que 5

select country_name, count(employee_id)
from employees join departments using (department_id)
join locations using (location_id)
join countries using (country_id)
join regions using (region_id)
where region_name != 'Asia'
group by country_name
having count (employee_id)>5;

---lo mismo pero seleccionando la media

select country_name, count(employee_id),AVG(salary)
from employees join departments using (department_id)
join locations using (location_id)
join countries using (country_id)
join regions using (region_id)
where region_name != 'Asia'
group by country_name
having count (employee_id)>5
having max(salary) > 10000;

---lo mismo pero con ciudad

select country_name,city, count(employee_id),AVG(salary)
from employees join departments using (department_id)
join locations using (location_id)
join countries using (country_id)
join regions using (region_id)
where region_name != 'Asia'
group by country_name,city
having count (employee_id)>5
having max(salary) > 10000;


********************************************************************
*LAS CONDICIONES DEL HAVING SOLO DEBE APARECER ESTO : COUNT ,SUM ,MAX,MIN,AVG."solo estas 5"
PERO NUNCA UNA CONDICION POR EJMPLO: having country_name != 'united Kindog'*
*este ejemplo se deberia poner en el where*
en select se pone solo que queremos que se muestre
***********************************************************************


BASE DE DATOS DE CLIMATOLOGIA
-----------------------------
--seleccionar la precipitacion media del mes de marzo agrupado por estacion 

select estacion,provincia ,avg(precipitacion_total)
from climatologia
where extract(month from fecha)=3
group by estacion,provincia;

--seleccionar la emdia de la temperatura media agrupando por provincia y mes .
-- ordena los resultados
--por provincia asc y cronologicamente (enero,febrero...)

select to_char(fecha,'TMMonth')as "mes"*, avg(temperatura_media),provincia
from climatologia 
group by fecha,provincia,to_char(fecha,'TMMonth')
order by provincia,mes ;
*esas comillas son un alias

--selecionar el numero de vuelos que salen en media 
--cada dia de la semana (lun mart)
--agrupando por aeroperto de salida

select ciudad,to_char(salida,'TMDay')as"dia",
count(*)
from vuelo vu join aeropuerto ar on (vu.desde=ar.id_aeropuerto)
group by ciudad,to_char(salida,'TMDay')
order by ciudad,dia ;

*PARA ESTE EJERCICIO HABIA QUE HACER UNA SUBCONSULTA ¡. EL EJERCICIO QUEDARIA ASI *
select ciudad,to_char(salida,'TMDay')as"dia",
count(*)
from vuelo vu join aeropuerto ar on (vu.desde=ar.id_aeropuerto)
group by ciudad,to_char(salida,'TMDay')
order by ciudad,dia ;

select ciudad ,avg(numval)
from(select ciudad,to_char(salida,'TMDay')as"dia",
count(*)as "numval"
from vuelo vu join aeropuerto ar on (vu.desde=ar.id_aeropuerto)
group by ciudad,to_char(salida,'TMDay')
order by ciudad,dia )datos
group by ciudad;

--SELCIBNAR EL SALARIO MEDIO MAXIMO AGRUPANDO POR DEPARTMANETO
--yo solito:)

select max(numval)
from(SELECT department_name, avg(salary) as "numval"
from employees join departments using (department_id)
group by department_name)d;

--sacar el nombre del departamento del que su media haya sido el maximo
*en este caso no hace falta hacer subconsulta*
********este ejemplo es uno de lso tipicos de los qe va a preguntar*********
select department_name ,avg(salary) as "media"
from employees join departments using (department_id)
group by department_name 
order by department_name 
limit 1;



<<<<<<< HEAD
----------------------------------------10:56 26/01/2023--------------------------------------------

*CORRECCION DE DEL EJERCICO 1*


-- 4 select street_address,count(employee_id) as"num"
from employees right join departments using (department_id)
left join locations using (location_id)
group by street_address;

--5
select salary,count(*)
from employees
 group by salary 
order by count(*) desc 
limit 1;

select salary,count(*)
from employees 
group salary
having count(*)
NO TERMINADO ....



=======
1
>>>>>>> a5608e349f16b0181ebcbae911a14b6b6f9f5719
mgangel — ayer a las 21:07



---------------------------------------9:11 27/01/2023-----------------------------------------




--1
select count(order_id)as "ha",employee_id
from employees join orders using (employee_id)
group by employee_id
having count(order_id) between 100 and 150; 
--2
select company_name 
from orders join shippers on (order_id=shipper_id)

group by shipper_id;
--3
select max(numval)
from(select category_id, (category_name) as "numval"
from categories
group by category_name,category_id)d;
--4
select o.unit_price+25
from order_details o join products pr on(o.order_id=pr.product_id)
join categories using (product_id)
group by category_id,product_id;

--5
select customer_id,order_id
from orders join customers cu using (customer_id)
where company_name = 'United Package'
group by order_id;

**CORRECCION DE EJERCICIO 1**

1.6:Seleccionar el número de empleados que empezaron a 
trabajar cada año, ordenando la salida por el año

seect to_char(hire_date,yyyy)as "año",count(*)
from employees
group by año 
order by año;

**CORRECION DEL EJERCICIO 2**



--seleccionar aquellos empleados que cobran menos que el empleado 145
select fisrt_name,last_name ,salary
from employees
where salary <(select salary
		from employees
		where employee_id=145);
No hay que ponerle alias .Solo a las subsconsultas del from 
todas las subconsultas que tenga un <,>.<=... como esta ultima siempre tienen que devolver un unico valor
 
--seleccionar los datos de aqulos empleados que cobre lo mismo 
--y esten en los mismo departamentos

select employee_id, fisrt_name,last_name ,salary
from employees
where (salary,department_id)= (select salary
		from employees
		where employee_id=101);

--selciionar los datos de aquellos empleados que 
--cobren mas que los empleados del departmento de Administyracion
select *
from employees join departments using(department_id)
where salary > all(select salary
		from employees join departments using (department_id)
		where department_name = 'Purchasing';

--selecionar los datos de aqullos empleados que cobren 
--mas que la media de salarios de los empeados 
--del departmento de Purchasing

select * 
from employees 
where salary > (select avg(salary)
				  from employees join departments using (department_id)
				  where department_name= 'Purchasing');

--seleccionar los empleados que tienen los mismos 
--salarios que los empleados del departamento
--de purchasing

select * 
from employees 
where salary  in (select avg(salary)
				  from employees join departments using (department_id)
				  where department_name= 'Purchasing');
**EL IN ES MUY IMPORTANTE **

2.5:Selecciona aquellos clientes (CUSTOMERS) para los que todos los envíos que 
ha recibido (sí, todos) los haya transportado (SHIPPERS) la empresa United Package.

LO CORREGIMOS DESPUE DEL FINDE 


--seleccionar aquellos departamentgos donde TODOS los empleados se contraron en el año 1994
select department_id
from employees join departments using (departments_id)
where employee_id not in(select employee_id
					from employees join departments using (department_id)
					where extraxct(year from hire_date)!=1994);

-------------------------------------------10:12 02/02/2023--------------------------------------

SUBCONSULTAS CORELACIONADAS

--los 5 empleados que mas cobran
select *
from employees
where salary in(select distinct salary
			   from employees
			   order by salary desc
			   limit 5);

--seleccionar los departamentos 
--con los empleados con salarios 
--mas altos. Debe aparecer el nombre del
--departamento y los 5 salario mas alto de dicho 
--departamento
select department_name,max (salary) as "maxi"
from employees join departments using (department_id)
group by department_name
having max(salary) in (select distinct max (salary) as "maxi" 
					   from employees join departments using (department_id)
					   group by department_name
					   order by maxi desc
					   limit 5
					  );
algunas subconsultas

-------------------9:39 03/02/2023----------------------------
**SUBCONSULTAS CORELACIONADAS**


--selecionar mostrando la provincia ,estacion y temperatura maxima
--mas alta de cada provincia
--para el mes de enero de 2019
select provincia,estacion,temperatura_maxima
from climatologia cli
where to_char(fecha,  'MM/YYYY')= '01/2019'
and temperatura_maxima >= all(SELECT temperatura_maxima
						   from climatologia cli2
							  where to_char(fecha,  'MM/YYYY')= '01/2019'
						   and cli2.provincia=cli.provincia );

--selecionar mostrando la provincia ,estacion y temperatura minima
--mas alta de cada provincia
--para el mes de enero de 2019
select provincia,estacion,temperatura_minima
from climatologia cli
where to_char(fecha,  'MM/YYYY')= '01/2019'
and temperatura_minima <= all(SELECT temperatura_minima
						   from climatologia cli2
							  where to_char(fecha,  'MM/YYYY')= '01/2019'
						   and cli2.provincia=cli.provincia );

--seleccionar el nombre del departamento
--el nombre completo del empleado y su salario 
-- para el empleado que cobra mas de cada 
--departamento
<<<Yo solito:)>>>	
select department_name,first_name,last_name,salary
from employees  join departments e1 using (department_id)
where salary >= all(select salary
				   from employees  join departments e2 using (department_id)
				   where e1.department_name=e2.department_name);

-------------------------------12:52 06/02/2023------------------------------------
 cunado en el enuncion poner TODOS
hay que poner todos - la condicion inversa ,es decir , not in


BOLETIN  2 *
___________*
--ejercicio 3
selct customers.*
from customers join orders using (customer_id)
where customer_id not in (select distinct customer_id
from orders join shippeers s on (shipper_id =ship_via)
where company_name is not 'united packed');

BOLETIN 3  *
___________*
--ejercicio 1
select nombre, count(id_reserva) "trafico"
from vuelo join reserva using (id_vuelo)
join aeropuerto on (hasta=id_aeropuerto)
where extract (month from llegada ) in (1,2,3)
group by nombre
order by trafico 
limt 3;

--ejercicio 4
select salida.nombre, llegada.nombre
age(vuelo.llegada,vuelo.salida)
from vuelo join aeropuerto salida on (vuelo.salida= salida.id_aeropuerto)
join aeropuerto llegada on (vuelo.llegada=llegada.id_aeropuerto)
where id_vuelo in(select id_vuelo
from vuelo
order by age(llegada,salida)
limit 10);

***como saber la duracion de un vuelo***
select id_vuelo
from vuelo
order by age(llegada,salida)
limit 10;

--ejercicio 2
select 
from cliente join operacion using (id_cliente)
join inmueble using (id_inmueble)
join tipo on (id_tipo=tipo_inmueble)
where precio_final >= all (select max (precio_final)

----------------------------------13:37 08/02/2023----------------------------------------

CORRECCION DEL EJERCICIO 4
4.1
select *, to_char(salida, 'ID'), max(age(llega,salida))
from vuelo join aeropuerto d on (d.id_aeropuerto = vuelo.desde)
join aeropuerto h on (h.id_aeropuerto = vuelo.hasta)
group by to_char (salida, 'ID');

--- OTRA FORMA 
select d.ciudad, h.ciudad,salida,llegada





**EXAMEN**
--1
select co.nombre,co.id_cliente
from comprador co join operacion using (id_cliente)
join inmueble using (id_inmueble)
where (provincia = 'Almería'
or provincia = 'Granada'); 
--2
select v1.nombre,sum(precio_final)
from operacion join inmueble using (id_inmueble)
join vendedor v1 using (id_vendedor)
where precio_final >= all(select precio_final
						 from vendedor v2 join operacion using (id_vendedor)
						  join inmueble using (id_inmueble)
						 where v1.id_vendedor=v2.id_vendedor 
						 and tipo_operacion = 'Alquiler')
and tipo_operacion = 'Alquiler'
group by v1.nombre;

--3
select *
from inmueble join operacion using (id_inmueble)
where precio_final < all(select avg(precio_final)
						from inmueble join operacion using (id_inmueble)
						where tipo_operacion = 'Venta'
						)
and tipo_operacion = 'Venta';
--5
select avg(precio) as"pre",(precio*superficie), extract(month from fecha_alta ) as"mes",
extract (year from fecha_alta) as "ye"
from inmueble
where tipo_operacion = 'Alquiler'
group by mes,ye,precio,superficie ;
--4
with ganancias_por_alquileres AS(select precio_final
from inmueble i3 join operacion using (id_inmueble)
where tipo_operacion = 'Alquiler'
group by precio_final
), ganancias_por_ventas AS(select precio_final
						    from inmueble i1 join operacion using (id_inmueble)
						   where tipo_operacion = 'Venta'
						   group by precio_final
)
select *
from ganancias_por_ventas,ganancias_por_alquileres;

***********************************************************************
*****************************TEMA 6************************************
***********************************************************************
			****************
			   **********
			      ****
				*
**DIFERENCIAS ENTRE POSTGRESSQL,MYSQL Y ORACLE**

-->POSTGRESAQL
	*Objeto relacional
	*Open source
	*pg pl sql

-->ORACLE
	*Comercial
	*Seguridad
	*pl sql

-->MYSQL
	*Mixta
	*Diferentes motores de datos
*************************************************

-Se diferencia: Matrices en SQL

-Se parecen: Sebdr>SQL, extension procedural

-Conclusiones:

-----------------------------------12:12 20/02/2023-------------------------------
*****CREACION DE BASE DE DATOS (TABLAS)************
***************************************************
	drop table if exists my_first_table;
	drop table if exists productos;
	drop table if exists categorias;
	drop table if exists alumno;

	CREATE TABLE my_first_table(
		first_column		text,
		second_colum		integer
	);
	create table productos(
		num_producto		serial,
		nombre				text,
		precio				numeric default 9.99,
		fecha_creacion		TIMESTAMP default CURRENT_TIMESTAMP,
		descuento 			numeric default 0,
		precio_desc 		numeric GENERATED always as(precio *(1-descuento)) stored
		
	);
	create table categorias(
		cod_categoria		smallserial,
		nombre				text
	);
	create table alumno(
		num_alumno			smallserial,
		horas 				integer default 6,
		nombre				VARCHAR(100),
		apellidos			VARCHAR(200),
		num_asignatura		smallint,
		nota_media			numeric default 5.5,
		fecha_nacimineto	date,
		fecha_matricula		date,
		edad				int2
	);
	
	CREATE table televisor(
		diagonal_in 		numeric,
		diagonal_pul		numeric generated always as (diagonal_in * 2.54) stored
	);

	insert INTO
		productos (nombre,precio)
	VALUES('PC',499.9);
	insert INTO
		productos (nombre)
	VALUES('auricular');
	insert INTO
		productos (nombre,precio)
	VALUES('raton',default);
	insert INTO
		alumno(nombre,apellidos)
		values('angel','perez');
	insert INTO
		alumno(nombre,apellidos)
		values('pepe','gomez');
	insert INTO
		alumno(nombre,apellidos)
		values('pablo','martinez');
	insert INTO
		alumno(nombre,apellidos)
		values('jaime','mora');
	insert INTO
		productos(nombre,precio,descuento)
		values('jaime',10,5);


	select *
	from productos;
***************************CORRECCION DEL EJERCICIO DE LIBRERIA****************************
*******************************************************************************************
DROP TABLE IF EXISTS libro CASCADE;
DROP TABLE IF EXISTS autor;
DROP TABLE IF EXISTS editorial;
DROP TABLE IF EXISTS genero;
DROP TABLE IF EXISTS edicion;

CREATE TABLE autor(
	dni 			VARCHAR(10),
	nombre 			TEXT NOT NULL,
	nacionalidad 		TEXT,

	CONSTRAINT pk_dni PRIMARY KEY (dni)
);

CREATE TABLE genero (
	id_genero		SMALLSERIAL,
	nombre			VARCHAR NOT NULL,
	descripcion		TEXT,
	CONSTRAINT pk_genero PRIMARY KEY (id_genero)
);

CREATE TABLE editorial (
	cod_editorial 		SERIAL,
	nombre			VARCHAR NOT NULL,
	direccion		VARCHAR,
	poblacion		VARCHAR,
	CONSTRAINT pk_editorial PRIMARY KEY (cod_editorial)
);

CREATE TABLE libro(
	isbn 			varchar(15),
	titulo 			TEXT NOT NULL,
	dni_autor 		VARCHAR(10) NOT NULL,
	cod_genero 		INT NOT NULL,
	cod_editorial 		INT NOT NULL,

	CONSTRAINT pk_libro PRIMARY KEY (isbn),
	CONSTRAINT fk_dni_autor FOREIGN KEY (dni_autor) REFERENCES autor,
	CONSTRAINT fk_cod_genero FOREIGN KEY (cod_genero) REFERENCES genero,
	CONSTRAINT fk_cod_editorial FOREIGN KEY (cod_editorial) REFERENCES editorial
);


CREATE TABLE edicion (
	isbn			VARCHAR(15),
	fecha_publicacion	DATE,
	cantidad		INTEGER,
	CONSTRAINT pk_edicion PRIMARY KEY (isbn, fecha_publicacion),
	CONSTRAINT ck_edicion_cantidad CHECK (cantidad > 0),
	CONSTRAINT fk_edicion_libro FOREIGN KEY (isbn) REFERENCES libro ON DELETE CASCADE
)
*****************************Hemos añadidio los alter y eso*************************************
************************************************************************************************
DROP TABLE IF EXISTS libro CASCADE;
DROP TABLE IF EXISTS autor;
DROP TABLE IF EXISTS editorial;
DROP TABLE IF EXISTS genero;
DROP TABLE IF EXISTS edicion;

CREATE TABLE autor(
	dni 			VARCHAR(10),
	nombre 			TEXT NOT NULL,
	nacionalidad 	TEXT,

	CONSTRAINT pk_dni PRIMARY KEY (dni)
);

CREATE TABLE genero (
	id_genero		SMALLSERIAL,
	nombre			VARCHAR NOT NULL,
	descripcion		TEXT,
	CONSTRAINT pk_genero PRIMARY KEY (id_genero)
);

CREATE TABLE editorial (
	cod_editorial 		SERIAL,
	nombre				VARCHAR NOT NULL,
	direccion			VARCHAR,
	poblacion			VARCHAR,
	CONSTRAINT pk_editorial PRIMARY KEY (cod_editorial)
);

CREATE TABLE libro(
	isbn 			varchar(15),
	titulo 			TEXT NOT NULL,
	dni_autor 		VARCHAR(10) NOT NULL,
	cod_genero 		INT NOT NULL,
	cod_editorial 		INT NOT NULL,

	CONSTRAINT pk_libro PRIMARY KEY (isbn)
	
);


CREATE TABLE edicion (
	isbn					VARCHAR(15),
	fecha_publicacion			DATE,
	cantidad				INTEGER,
	CONSTRAINT pk_edicion PRIMARY KEY (isbn, fecha_publicacion),
	CONSTRAINT ck_edicion_cantidad CHECK (cantidad > 0)
	
);

alter table libro alter COLUMN cod_genero drop not null;
alter table edicion
add CONSTRAINT fk_edicion_libro FOREIGN KEY (isbn) REFERENCES libro ON DELETE CASCADE;
alter table libro
add CONSTRAINT fk_dni_autor FOREIGN KEY (dni_autor) REFERENCES autor,
add CONSTRAINT fk_cod_genero FOREIGN KEY (cod_genero) REFERENCES genero,
add	CONSTRAINT fk_cod_editorial FOREIGN KEY (cod_editorial) REFERENCES editorial

-> Create: todas menos las fk
-> Alter: solo las fk

-------------------------------------9:12 03/03/2023---------------------------------------
**CORRECION DEL EJERCICIO DE EVALUACION**
*****************************************
drop table if exists docentes;
drop table if exists actividades;
drop table if exists alumnos;
drop table if exists asignacion_act;
drop table if exists asistencia_act;

create table docentes(
	dni			varchar(9),
	nombre		text,
	telefono	integer,
	anioIngreso	smallint,   
	constraint pk_docentes primary key(dni)
	

create table actividades(
	idAct		smallserial,
	nombre		text,
	duracion	int2,
	constraint pk_actividades primary key(idAct)
);

create table alumnos (
	cod_alumno	smallserial,
	nombre		varchar,
	telefono	varchar,
	nivel		int2,
	constraint pk_calumnos primary key(cod_alumno)
);
CREATE table asignacion_act(
	idDoc		varchar,
	idAct		smallserial,
	diaSemana	varchar,
	hora		int2,
	constraint pk_asiganacion_act primary key(idDoc,idAct,diaSemana,hora)
);
create table asistencia_act(
	idAlum		int2,
	idAct		int2,
	idDoc		varchar,
	constraint pk_aisstencia_act primary key(idAlum,idAct)
	
);

alter table asignacion_act
add CONSTRAINT fk_asignacionact foreign key (idAct)
REFERENCES actividades;

alter table asistencia_act
add constraint fk_asistenciaact foreign key (idAct)
references 	actividades;

alter table asistencia_act
add constraint fk_asistenciact FOREIGN key (idAlum)
references alumnos;

**CORRECION DEL EJERCICIO 4**
*****************************
DROP TABLE IF EXISTS usuario cascade ;
DROP TABLE IF EXISTS estaciones cascade ;
DROP TABLE IF EXISTS bicicletas ;
DROP TABLE IF EXISTS uso ;

create table usuario(
	dni varchar,
	nombre	text not null,
	apellidos	text not null,
	direccion	text ,
	telefono	text not null,
	email	text not null,
	passw	text ,
	saldo_disponible	numeric not null  default 0,
	fecha_baja	date,
	constraint pk_usuario primary key (dni)
	constraint ck_usuarios_sin-espacios CHECK (passw not like '% %')
	constraint cd_usuario_longitud check (length(passw)BETWEEN 4 and 8)
	
);
create table estaciones(
	cod_estacion varchar(10),
	num_estacion	smallserial not null,
	direccion	text not null,
	latitud	numeric not null,
	longitud	numeric not null,
	constraint pk_estaciones primary key (cod_estacion),
	CONSTRAINT ck_estaciones_empiezapore check (cod_estacion like 'E%')
	
);
create table bicicletas(
	cod_bicicleta smallserial,
	marca	text not null,
	modelo	text not null,
	fecha_alta	date not null,
	constraint pk_bicicletas primary key (cod_bicicleta)
	
);
create table uso(
	estacion_salida	text,	
	fecha_salida	date,
	dni_usario	text,
	cod_bicicleta	integer,
	estacion_llegada	text,
	fecha_llegada	date not null,
	constraint pk_uso primary key (estacion_salida,fecha_salida,dni_usario,
								   cod_bicicleta,estacion_llegada)
	
);
alter table uso
add constraint fk_usobi foreign key (cod_bicicleta)
references bicicletas;

********************12:15 06/03/2023**************************************
*******************POLITICAS DE BORRADOS (CASI TODAS)*********************
**************************************************************************
DROP TABLE IF EXISTS empresas CASCADE;
DROP TABLE IF EXISTS alumno CASCADE;
DROP TABLE IF EXISTS alumno_aisten CASCADE;
DROP TABLE IF EXISTS curso CASCADE;
DROP TABLE IF EXISTS profesor CASCADE;
DROP TABLE IF EXISTS tipo_curso CASCADE;

CREATE TABLE empresas(
	cif		text,
	nombre	text,
	direccion	text,
	telefono	text,

	CONSTRAINT pk_empresa PRIMARY KEY (cif)
);
CREATE TABLE alumno(
	dni 			text,
	nombre	text,
	direccion	text,
	telefono	text,
	edad 		numeric,
	empresa	text,
	
	CONSTRAINT pk_alumno PRIMARY KEY (dni)
);
CREATE TABLE alumno_asisten(
	dni 			text,
	n_concreto		int,
	
	CONSTRAINT pk_alumnoasiten PRIMARY KEY (dni,n_concreto)
	
);
CREATE TABLE curso(
	n_concreto	int,
	fecha_inicio	date,
	fecha_fin	date,
	dni_profesor	text,
	tipo_curso	int,
	constraint pk_curso	primary key(n_concreto)
);
CREATE TABLE profesor(
	dni		text,
	nombre	text,
	apellido	text,
	telefono	text,
	direccion	text,
	constraint pk_profesor primary key (dni)
);
CREATE TABLE tipo_curso(
	cod_curso	int,
	duracion	int,
	programa	text,
	titulo		int,
	constraint pk_tipocurso primary key (cod_curso)
);
alter table alumno
add constraint fk_empresa foreign key (empresa)
references empresas;

alter table alumno_asisten
add constraint fk_dnni foreign key(dni)
references alumno cascade;

alter table alumno_asisten
add constraint fk_nconcreto foreign key(n_concreto)
references curso;

alter table curso
add constraint fk_dniprofe foreign key (dni_profesor)
references profesor set null;

alter table curso 
add constraint fk_codcurso foreign key (tipo_curso)
references tipo_curso;

**************************************************************
CAMBIAR LO QUE SEA
set precio=(select max(precio)
		from vuelo
		where desde = 1 and hasta 2
		)
where desde = 2 and hasta = 1;

BORRAR;base datos de vuelos
delete from reserva 
where id_reserva in/= 1;
-------------------
OTRA FORMA DE BORRAR:
delete from reserva
where fecha_reserva < '2022-05-31'::date;> MUCHO PELIGRO PORQUE EN ESTE CASO BORRAS TODO LO ANTES DE 2022-05-31
						Y NO SE RECUPERA.
-----------------------------
-----------------------------
CREATE TABLE users (firstname text, lastname text, id serial primary key);
INSERT INTO users (firstname, lastname) VALUES ('Joe', 'Cool') RETURNING
id;
primero creamos la tabla users 
y despues esto:	INSERT INTO users (firstname, lastname) VALUES 
		('Joe', 'Cool') RETURNING
			id;
y si seleccionamos esto ultimo es como si estuviermos haciendo : select *
								from users;
------------------------------
------------------------------
en este ejemplo nos devolveria lo que hemos borrado

DELETE FROM productos
WHERE fecha_tope = 'today'
RETURNING *;

